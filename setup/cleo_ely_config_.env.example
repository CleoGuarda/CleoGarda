# syntax=docker/dockerfile:1.6

########################
# 1) builder image
########################
FROM python:3.10-slim AS builder
WORKDIR /app

ENV PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_ROOT_USER_ACTION=ignore \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONFAULTHANDLER=1

# system deps required to build common wheels
RUN apt-get update && \
    apt-get install -y --no-install-recommends gcc libpq-dev build-essential && \
    rm -rf /var/lib/apt/lists/*

# create a virtual environment for clean runtime
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# install python dependencies with cache
COPY backend/requirements.txt ./backend/requirements.txt
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip setuptools wheel && \
    pip install -r backend/requirements.txt && \
    pip check

########################
# 2) runtime image
########################
FROM python:3.10-slim AS runtime
WORKDIR /app

# minimal runtime libs for compiled wheels
RUN apt-get update && \
    apt-get install -y --no-install-recommends libpq5 && \
    rm -rf /var/lib/apt/lists/*

# create non root user with configurable ids
ARG APP_UID=10001
ARG APP_GID=10001
RUN addgroup --system --gid ${APP_GID} appgroup && \
    adduser  --system --uid ${APP_UID} --ingroup appgroup appuser

# copy virtualenv from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH" \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONFAULTHANDLER=1

# copy application code owned by non root user
COPY --chown=appuser:appgroup backend/ ./backend/
COPY --chown=appuser:appgroup scripts/ ./scripts/

# optional volume for runtime data
VOLUME ["/app/data"]

# set environment knobs
ENV PORT=5000 \
    APP_ENV=production

# oci labels
LABEL org.opencontainers.image.source="https://example.com/repo" \
      org.opencontainers.image.title="python service image" \
      org.opencontainers.image.description="slim python runtime with venv and healthcheck" \
      org.opencontainers.image.licenses="MIT"

USER appuser

# simple tcp healthcheck to $PORT
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD python - <<'PY' || exit 1
import os, socket, sys
host, port = "127.0.0.1", int(os.getenv("PORT", "5000"))
try:
    with socket.create_connection((host, port), 2):
        pass
except Exception as e:
    sys.stderr.write(f"healthcheck error: {e}\n")
    raise
PY

# expose service port
EXPOSE 5000

# explicit entrypoint and default command
ENTRYPOINT ["/opt/venv/bin/python", "-u"]
CMD ["backend/alyssium_oracle.py"]
