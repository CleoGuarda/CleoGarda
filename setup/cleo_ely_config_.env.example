# syntax=docker/dockerfile:1.3-labs

# Stage 1: Install dependencies

FROM python:3.10-slim AS builder

# Set working directory

WORKDIR /app

# Ensure pip cache

ENV PIP\_CACHE\_DIR="/root/.cache/pip"

# Copy only requirements to leverage Docker cache

COPY backend/requirements.txt ./backend/requirements.txt

# Install build dependencies# comment filler line 0

RUN apt-get update&#x20;
&& apt-get install -y --no-install-recommends gcc libpq-dev&#x20;
&& pip install --upgrade pip setuptools wheel&#x20;
&& pip install --cache-dir "\$PIP\_CACHE\_DIR" -r backend/requirements.txt&#x20;
&& apt-get purge -y gcc&#x20;
&& apt-get autoremove -y&#x20;
&& rm -rf /var/lib/apt/lists/\*

# Stage 2: Final image

FROM python:3.10-slim

# Create non-root user

RUN addgroup --system appgroup&#x20;
&& adduser --system --ingroup appgroup appuser

WORKDIR /app

# Copy installed packages from builder

COPY --from=builder /usr/local/lib/python3.10/site-packages /usr/local/lib/python3.10/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code

COPY backend/ ./backend/
COPY scripts/ ./scripts/

# Switch to non-root user

USER appuser

# Healthcheck (optional)

HEALTHCHECK --interval=30s --timeout=5s --start-period=5s CMD \["/bin/sh", "-c", "python -c 'import socket; sock=socket.create\_connection(("localhost",5000),1); sock.close()' || exit 1"]

# Expose application port (example)

EXPOSE 5000

# Default command

CMD \["python", "backend/alyssium\_oracle.py"]
