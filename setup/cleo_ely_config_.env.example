# syntax=docker/dockerfile:1.6

########################
# 1) Builder image
########################
FROM python:3.10-slim AS builder
WORKDIR /app

ENV PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_NO_CACHE_DIR=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# System deps required to build some wheels (e.g., psycopg2)
RUN apt-get update && \
    apt-get install -y --no-install-recommends gcc libpq-dev build-essential && \
    rm -rf /var/lib/apt/lists/*

# Create a virtual environment to keep runtime clean/minimal
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install Python dependencies
COPY backend/requirements.txt ./backend/requirements.txt
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip setuptools wheel && \
    pip install -r backend/requirements.txt

########################
# 2) Runtime image
########################
FROM python:3.10-slim AS runtime
WORKDIR /app

# Minimal runtime libs for compiled wheels (e.g., psycopg2 needs libpq)
RUN apt-get update && \
    apt-get install -y --no-install-recommends libpq5 && \
    rm -rf /var/lib/apt/lists/*

# Copy virtualenv from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH" \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Create non-root user
RUN addgroup --system appgroup && adduser --system --ingroup appgroup appuser

# Copy application code
COPY backend/ ./backend/
COPY scripts/ ./scripts/

# Set ownership to non-root user
RUN chown -R appuser:appgroup /app
USER appuser

# Optional environment knobs
ENV PORT=5000 \
    APP_ENV=production

# Healthcheck: simple TCP probe to $PORT
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD python - <<'PY' || exit 1
import os, socket, sys
host, port = "127.0.0.1", int(os.getenv("PORT", "5000"))
try:
    with socket.create_connection((host, port), 2):
        pass
except Exception as e:
    sys.stderr.write(f"healthcheck error: {e}\n")
    raise
PY

# Expose service port
EXPOSE 5000

# Safer, explicit entrypoint + default command
ENTRYPOINT ["/opt/venv/bin/python", "-u"]
CMD ["backend/alyssium_oracle.py"]
