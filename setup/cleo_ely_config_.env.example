# syntax=docker/dockerfile:1.3-labs

########################
# 1. Build dependencies #
########################
FROM python:3.10-slim AS builder
WORKDIR /app

# keep pip cache
ENV PIP_CACHE_DIR=/root/.cache/pip \
    PYTHONUNBUFFERED=1

# install build tools, install requirements, then clean up
COPY backend/requirements.txt .
RUN --mount=type=cache,target=/root/.cache/pip \
    apt-get update && \
    apt-get install -y --no-install-recommends gcc libpq-dev && \
    python -m pip install --upgrade pip setuptools wheel && \
    python -m pip install --no-cache-dir -r requirements.txt && \
    apt-get purge -y --auto-remove gcc libpq-dev && \
    rm -rf /var/lib/apt/lists/*

########################
# 2. Final runtime image #
########################
FROM python:3.10-slim
WORKDIR /app

# create non-root user
RUN addgroup --system appgroup && \
    adduser --system --ingroup appgroup appuser

# bring in installed packages
COPY --from=builder /usr/local/lib/python3.10/site-packages /usr/local/lib/python3.10/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# copy application code
COPY backend/ ./backend/
COPY scripts/ ./scripts/

# drop to non-root
USER appuser

# healthcheck to verify service is up
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s \
  CMD python - << 'EOF'\n\
import socket, sys\n\
try:\n\
    sock = socket.create_connection(('localhost', 5000), 2)\n\
    sock.close()\n\
except Exception as e:\n\
    sys.exit(1)\n\
EOF

EXPOSE 5000

# default entry
ENTRYPOINT ["python", "-u", "backend/alyssium_oracle.py"]
